# Ref https://aws.amazon.com/jp/quickstart/architecture/spinnaker/
AWSTemplateFormatVersion: 2010-09-09
Description: QS(0024) - Spinnaker QuickStart
Parameters:
  KeyName:
    Description: Key Pair Name
    Type: 'AWS::EC2::KeyPair::KeyName'
  Password:
    ConstraintDescription: the password must be between 1 and 41 characters
    Description: Password for Spinnaker User account
    MaxLength: '41'
    MinLength: '1'
    NoEcho: 'true'
    Type: String
  SpinnakerVPCCIDR:
    Description: CIDR Block for Developer VPC
    Type: String
    Default: 10.100.0.0/16
  SpinnakerPublicSubnetCIDR:
    Description: SpinnakerEnv Public Subnet
    Type: String
    Default: 10.100.10.0/24
    ConstraintDescription: IP CIDR must be in the range of your VPC
  SpinnakerPrivateSubnetCIDR:
    Description: SpinnakerEnv Private Subnet
    Type: String
    Default: 10.100.11.0/24
    ConstraintDescription: IP CIDR must be in the range of your VPC
  SSHLocation:
    Description: >-
      The IP address range that can be used to SSH to the Bastion host. Note: a
      value of 0.0.0.0/0 will allow access from ANY ip address
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  GenericAMIId:
    ap-northeast-1:
      HVM64: ami-374db956
      HVMG2: ami-e0ee1981
      PV64: ami-3e42b65f
    ap-northeast-2:
      HVM64: ami-2b408b45
      HVMG2: NOT_SUPPORTED
      PV64: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-a59b49c6
      HVMG2: ami-0cb5676f
      PV64: ami-df9e4cbc
    ap-southeast-2:
      HVM64: ami-dc361ebf
      HVMG2: ami-a71c34c4
      PV64: ami-63351d00
    cn-north-1:
      HVM64: ami-8e6aa0e3
      HVMG2: NOT_SUPPORTED
      PV64: ami-77559f1a
    eu-central-1:
      HVM64: ami-ea26ce85
      HVMG2: ami-7f04ec10
      PV64: ami-6527cf0a
    eu-west-1:
      HVM64: ami-f9dd458a
      HVMG2: ami-b9bd25ca
      PV64: ami-4cdd453f
    sa-east-1:
      HVM64: ami-6dd04501
      HVMG2: NOT_SUPPORTED
      PV64: ami-1ad34676
    us-east-1:
      HVM64: ami-6869aa05
      HVMG2: ami-2e5e9c43
      PV64: ami-2a69aa47
    us-west-1:
      HVM64: ami-31490d51
      HVMG2: ami-fd76329d
      PV64: ami-a2490dc2
    us-west-2:
      HVM64: ami-7172b611
      HVMG2: ami-83b770e3
      PV64: ami-7f77b31f
  SpinnakerAMIId:
    sa-east-1:
      AMI: ami-f3e1769f
    us-east-1:
      AMI: ami-4153d956
    us-west-1:
      AMI: ami-87dc9de7
    us-west-2:
      AMI: ami-21a26d41
Resources:
  BaseIAMRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
    Type: 'AWS::IAM::Role'
  SpinnakerAccessKey:
    DependsOn: SpinnakerUser
    Description: Generate AccessKey for Spinnaker
    Properties:
      UserName: !Ref SpinnakerUser
    Type: 'AWS::IAM::AccessKey'
  SpinnakerInstanceProfile:
    DependsOn: SpinnakerRole
    Properties:
      Path: /
      Roles:
        - !Ref SpinnakerRole
    Type: 'AWS::IAM::InstanceProfile'
  SpinnakerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/PowerUserAccess'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'iam:PassRole'
                Effect: Allow
                Resource: !GetAtt 
                  - BaseIAMRole
                  - Arn
                Sid: Stmt1449267121000
            Version: 2012-10-17
          PolicyName: Spinnakerpassrole
    Type: 'AWS::IAM::Role'
  SpinnakerUser:
    Description: User identity Spinnaker uses to create AWS resources
    Properties:
      LoginProfile:
        Password: !Ref Password
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/PowerUserAccess'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'iam:PassRole'
                Effect: Allow
                Resource: !GetAtt 
                  - BaseIAMRole
                  - Arn
                Sid: Stmt1449267121000
            Version: 2012-10-17
          PolicyName: Spinnakerpassrole
    Type: 'AWS::IAM::User'
  SpinnakerVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref SpinnakerVPCCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: VPC
          Value: Spinnaker VPC
        - Key: Name
          Value: SpinnakerVPC
  SpinnakerInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  SpinnakerAttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref SpinnakerVPC
      InternetGatewayId: !Ref SpinnakerInternetGateway
  SpinnakerPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref SpinnakerVPC
      CidrBlock: !Ref SpinnakerPublicSubnetCIDR
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Join 
            - .
            - - !Ref SpinnakerVPC
              - internal
              - !Select 
                - '0'
                - !GetAZs ''
  SpinnakerPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    DependsOn:
      - SpinnakerVPC
      - SpinnakerAttachGateway
    Properties:
      VpcId: !Ref SpinnakerVPC
      Tags:
        - Key: Name
          Value: Spinnaker Public Route Table
  SpinnakerPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref SpinnakerPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SpinnakerInternetGateway
  SpinnakerPublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SpinnakerPublicSubnet
      RouteTableId: !Ref SpinnakerPublicRouteTable
  SpinnakerPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    DependsOn: SpinnakerVPC
    Properties:
      VpcId: !Ref SpinnakerVPC
      CidrBlock: !Ref SpinnakerPrivateSubnetCIDR
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: !Join 
            - .
            - - !Ref SpinnakerVPC
              - internal
              - !Select 
                - '0'
                - !GetAZs ''
  NAT:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NATEIP
        - AllocationId
      SubnetId: !Ref SpinnakerPublicSubnet
  NATEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  SpinnakerPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref SpinnakerVPC
      Tags:
        - Key: Name
          Value: Spinnaker Private Route Table
  SpinnakerPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref SpinnakerPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
  SpinnakerPrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SpinnakerPrivateSubnet
      RouteTableId: !Ref SpinnakerPrivateRouteTable
  SpinnakerBastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      Tags:
        - Key: Name
          Value: SpinnakerBastionSecurityGroup
      VpcId: !Ref SpinnakerVPC
  SpinnakerWebServerSecurityGroup:
    DependsOn: SpinnakerBastionSecurityGroup
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for Spinnaker Web server
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SpinnakerBastionSecurityGroup
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '9000'
      Tags:
        - Key: Name
          Value: SpinnakerWebServerSecurityGroup
      VpcId: !Ref SpinnakerVPC
  BastionServer:
    DependsOn:
      - SpinnakerBastionSecurityGroup
    Properties:
      ImageId: !FindInMap 
        - GenericAMIId
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: BastionServer
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - '#!/bin/bash'
            - |+

            - |
              sudo yum -y update
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref SpinnakerBastionSecurityGroup
          SubnetId: !Ref SpinnakerPublicSubnet
    Type: 'AWS::EC2::Instance'
  SpinnakerWebServer:
    DependsOn:
      - SpinnakerInstanceProfile
      - SpinnakerWebServerSecurityGroup
    Properties:
      EbsOptimized: false
      IamInstanceProfile: !Ref SpinnakerInstanceProfile
      ImageId: !FindInMap 
        - SpinnakerAMIId
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: m4.4xlarge
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - !Ref SpinnakerWebServerSecurityGroup
          SubnetId: !Ref SpinnakerPublicSubnet
      Tags:
        - Key: Name
          Value: SpinnakerWebServer
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - '#!/bin/bash'
            - |+

            - |
              /opt/spinnaker/bin/stop_spinnaker.sh
            - |
              apt-get update -y
            - |
              apt-get dist-upgrade -y --force-yes spinnaker
            - |
              /var/lib/dpkg/info/ca-certificates-java.postinst configure
            - >
              sed -i 's/name: .*/name: default/g'
              /opt/spinnaker/config/spinnaker-local.yml
            - 'sed -i ''s/defaultIAMRole: .*/defaultIAMRole: '
            - !Ref BaseIAMRole
            - |
              /g' /opt/spinnaker/config/spinnaker-local.yml
            - >
              sed -i
              's/SPINNAKER_AWS_ENABLED=false/SPINNAKER_AWS_ENABLED=true/g'
              /etc/default/spinnaker
            - >-
              sed -i
              's/SPINNAKER_AWS_DEFAULT_REGION=.*/SPINNAKER_AWS_DEFAULT_REGION=
            - !Ref 'AWS::Region'
            - |
              /g' /etc/default/spinnaker
            - |
              mkdir /home/spinnaker/.aws/
            - 'printf "[default]\n'
            - 'aws_access_key_id= '
            - !Ref SpinnakerAccessKey
            - \n
            - 'aws_secret_access_key= '
            - !GetAtt 
              - SpinnakerAccessKey
              - SecretAccessKey
            - |
              " > /home/spinnaker/.aws/credentials
            - |
              /opt/spinnaker/scripts/reconfigure_spinnaker.sh
            - |
              /opt/spinnaker/bin/start_spinnaker.sh
    Type: 'AWS::EC2::Instance'
Outputs:
  PublicDNS:
    Description: Public DNSName of bastion host.
    Value: !GetAtt 
      - BastionServer
      - PublicDnsName
  PrivateDNS:
    Description: Private DNSName of Spinnaker web server.
    Value: !GetAtt 
      - SpinnakerWebServer
      - PrivateDnsName
  SSHString2:
    Description: SSH String
    Value: !Join 
      - ''
      - - >-
          ssh -L 9000:localhost:9000 -L 8084:localhost:8084 -L
          8087:localhost:8087 ubuntu@
        - !GetAtt 
          - SpinnakerWebServer
          - PrivateIp
  SSHString1:
    Description: SSH String
    Value: !Join 
      - ''
      - - >-
          ssh -A -L 9000:localhost:9000 -L 8084:localhost:8084 -L
          8087:localhost:8087 ec2-user@
        - !GetAtt 
          - BastionServer
          - PublicIp
